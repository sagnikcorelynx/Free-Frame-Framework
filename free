#!/usr/bin/env php
<?php
// CLI Entry for FreeFrame Framework

require __DIR__ . '/vendor/autoload.php';

use Symfony\Component\Console\Application;
use App\Commands\ServeCommand;
use App\Commands\MakeControllerCommand;

// Initialize the Free CLI application
$version = trim(shell_exec('git describe --tags --abbrev=0') ?? 'dev-master');
$composer = json_decode(file_get_contents(__DIR__ . '../composer.json'), true);
$version = $composer['version'] ?? 'dev-master';
$app = new Application('FreeFrame CLI', $version);

// Register your command classes
$app->add(new ServeCommand());
$app->add(new MakeControllerCommand());
$app->add(new \App\Commands\MakeServiceCommand());
$app->add(new \App\Commands\MakeModelCommand());
$app->add(new App\Commands\MakeCommandCommand());
$app->add(new \App\Commands\MigrateCommand());
$app->add(new App\Commands\LogClearCommand());
$app->add(new App\Commands\StorageLinkCommand());
$app->add(new App\Commands\RouteListCommand());
$app->add(new App\Commands\MakeMiddlewareCommand());
$app->add(new App\Commands\MakeRequestCommand());
$app->add(new App\Commands\AuthInstallCommand());

$commands = [
    'make:controller'         => 'Generate a controller file',
    'make:model'              => 'Generate a model file',
    'make:service'            => 'Generate service file',
    'make:middleware'         => 'Generate middleware file',
    'route:list'              => 'Show all defined routes',
    'log:clear'               => 'Clear error logs',
    'make:command'            => 'Create custom command file',
    'storage:link'            => 'Create simbolic link between storage and public',
    'help'                    => 'List all available commands',
    'serve'                   => 'Start development server'
];

$command = $argv[1] ?? 'help';

if ($command === 'help') {
    echo "\n\033[1;34mFreeFrame CLI - Available Commands:\033[0m\n\n";
    foreach ($commands as $key => $desc) {
        printf("\033[32m  %-25s\033[0m%s\n", $key, $desc);
    }
    echo "\n";
    exit;
}



// Future: auto-register all classes in app/Commands dynamically (optional)

$app->run();
